from app import db
from sqlalchemy import ForeignKey, Interval, Integer, Boolean, BigInteger, UniqueConstraint, Index
from sqlalchemy.orm import relationship
from utils import common_func


class SchedulerJobs(db.Model):
    __tablename__ = 'scheduler_jobs'

    job_id = db.Column(db.String(), primary_key=True)
    system_id = db.Column(db.String(), ForeignKey('scheduler_job_servers.system_id'))
    group_id = db.Column(db.String(), ForeignKey('scheduler_job_groups.group_id'))
    job_name = db.Column(db.String(128))
    start_date = db.Column(BigInteger)
    end_date = db.Column(BigInteger)
    repeat_interval = db.Column(db.String(4000))
    max_run_duration = db.Column(Interval)
    max_run = db.Column(Integer, default=0)
    max_failure = db.Column(Integer, default=0)
    retry_delay = db.Column(Integer, default=30)
    priority = db.Column(Integer, default=3)
    is_enabled = db.Column(Boolean, default=True)
    auto_drop = db.Column(Boolean, default=False)
    restart_on_failure = db.Column(Boolean, default=False)
    restartable = db.Column(Boolean, default=False)
    job_comments = db.Column(db.String(4000))
    job_type = db.Column(db.String(16))
    job_action = db.Column(db.String(4000))
    job_body = db.Column(db.String())
    timezone = db.Column(db.String())
    last_start_date = db.Column(BigInteger)
    next_run_date = db.Column(BigInteger)
    last_run_duration = db.Column(Interval)
    current_state = db.Column(db.String(20), default="SCHEDULED")
    run_count = db.Column(Integer, default=0)
    failure_count = db.Column(Integer, default=0)
    retry_count = db.Column(Integer, default=0)
    priority_group_id = db.Column(db.String())
    workflow_id = db.Column(db.String())
    ignore_result = db.Column(Boolean, default=False)
    frst_reg_date = db.Column(BigInteger)
    frst_reg_user_id = db.Column(db.String(), ForeignKey('scheduler_users.id'))
    last_chg_date = db.Column(BigInteger)
    last_reg_user_id = db.Column(db.String(), ForeignKey('scheduler_users.id'))
    server = relationship("SchedulerJobServers")
    group = relationship("SchedulerJobGroups")
    frst_user = relationship("SchedulerUsers", foreign_keys=[frst_reg_user_id])
    last_user = relationship("SchedulerUsers", foreign_keys=[last_reg_user_id])
    last_log = relationship("SchedulerJobLastLog", uselist=False, back_populates="scheduled_job")
    run_logs = relationship("SchedulerJobRunLogs")
    # This is due to Alembic will not autodetect anonymous constraints
    # Sample if need multiple columns:
    # __table_args__ = (UniqueConstraint('column 1', 'column 2', name='name'),)
    __table_args__ = (
        UniqueConstraint("job_name", name="job_table_unique"),
        Index('idx_system_group', 'system_id', 'group_id'),
    )

    def __init__(self, params):
        self.job_id = params.get('job_id')
        self.system_id = params.get('system_id')
        self.group_id = params.get('group_id')
        self.job_name = params.get('job_name')
        self.start_date = params.get('start_date')
        self.end_date = params.get('end_date')
        self.repeat_interval = params.get('repeat_interval')
        self.max_run_duration = params.get('max_run_duration')
        self.max_run = params.get('max_run')
        self.max_failure = params.get('max_failure')
        self.retry_delay = params.get('retry_delay')
        self.priority = params.get('priority')
        self.is_enabled = params.get('is_enabled')
        self.auto_drop = params.get('auto_drop')
        self.restart_on_failure = params.get('restart_on_failure')
        self.restartable = params.get('restartable')
        self.job_comments = params.get('job_comments')
        self.job_type = params.get('job_type')
        self.job_action = params.get('job_action')
        self.job_body = params.get('job_body')
        self.timezone = params.get('timezone')
        self.last_start_date = params.get('last_start_date')
        self.next_run_date = params.get('next_run_date')
        self.last_run_duration = params.get('last_run_duration')
        self.current_state = params.get('current_state')
        self.ignore_result = params.get('ignore_result')
        self.run_count = params.get('run_count')
        self.failure_count = params.get('failure_count')
        self.retry_count = params.get('retry_count')
        self.priority_group_id = params.get('priority_group_id')
        self.workflow_id = params.get('workflow_id')
        self.frst_reg_date = common_func.get_current_utc_time(in_epoch=True)
        self.frst_reg_user_id = params.get('frst_reg_user_id')
        self.last_chg_date = params.get('last_chg_date')
        self.last_reg_user_id = params.get('last_reg_user_id')

    def __repr__(self):
        return '<id {}>'.format(self.job_id)
